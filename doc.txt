Javascript -

common methods : 
-   Strings:
str.length -> Length of a string
str.toLowerCase()
str.toUpperCase()
str.replace("what to replace", "with what")
str.charCodeAt(index)   -> returns the ASCII value of char in index
String.fromCharCode(code)  -> returns the character for the ascii code

-   Convert string to array
modified_str = str.split(delimitor or regex for delimiter)

-   Conver array to string
string = arr.join(delimiter to apply while joining to string)

-   Arrays:
arr.push(any no of ele) -> append to array; multiple ele can be pushed at once; returns new length of arr
arr.unshift(any no of ele) -> add ele to beginning; retuens new length of arr
arr.pop -> returns popped ele
arr.shift -> removes first ele and returns it
arr.splice(startindex, #ele, remaning args are inserted at the removed pos after deleting) -> removes ele from startindex until #ele and returns the removed list of ele;  modifies the original array                                                                                 
arr.slice(start index, upto index) -> create new array by extracting ele from original array (which is not modified)
arr.indexOf(arr, ele)   -> returns index of ele in arr else returns -1
arr1.concat(arr2)   -> unions both arrays without modifiying either of them

-   Objects: 
typeof ___
Object.keys(obj)    -> gets a list of keys for obj
iterate through all keys in an object -> 
for(let key in obj){
}

-   Others:
switch(n){
    case 1:
        ____;
        break;
    default:
        _____;
        break;
}

-   every method is used with a callback function that applies the callback on every value of iterable and returns true if every iterable satisifies the condotion in the callback
iterable.every (function(callback)){
    condition which returns bool
}

-   some method is used with callback to check if any element in the iterable meets a condition; the syntax is similar to every





other imp things to remember :
string values are immutable
arrays, lists and objects are heterogenous and can store anything from complex objects to data types like undefined
variables declared anywhere without let or const are considered to be global
in global vs local var; local var takes the precedence
if there is no return for a function; it returns undefined
== doesnot consider type of data of operands; but strictly equal to considers datatypes as well
> and < operators check loosely by datatype of operands
while chaining elseif; its not mandatory that it ends with an else
case values in switch are checked using strictly equal to
if a prop of any object is non-string; JS automatically converts them to a string
parseInt retuns a NaN if number cant be converted to a string
second arg of parseInt indicates the base in which the current string is in
