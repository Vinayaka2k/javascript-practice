-   this
refers to the object that invoked the method

-  check type of object using instance of :
obj instanceof Class

-   check type of object using constructor property :
-   constructor property points to the Class which created the object
let obj = new Class()
check : obj.constructor === Class

-   obj.hasOwnProperty(prop)
returns T if obj has prop as it's own property
returns F if obj has prop as the prototype property

-   Add a property to an object's prototype if the value for this object is same across all instances; reduce duplication
obj.prototype.property = value;

-   Add prototype props to a Class
function Bird(){                    // constr function
    this.name = name;
}
let b = new Bird();
Bird.prototype.color = 'blue';
b.color                              // blue

-   for(let prop in obj){
    if(obj.hasOwnProperty(prop))
        // prop is the own property of duck
    else
        // prop is the prototype property of duck
}

-   Instead of adding individual props to Class.Prototype, we can assign Class.Prototype to an obj
so that we can assign all the props at one shot

Bird.Prototype = {
    prop1 : val1 ...
}

-   When the prototype is changed to a new obj this way; the constructor property for any object of Bird would get overriden.
b.constructor would now point to the global Object instead of Bird.
-   Therefore, while assigning prototype to new object, add constructor as well like so:

Bird.Prototype = {
    constructor : Bird,
    prop1 : val1 ...
}

-   Where the prototype comes from ?
An obj inherits its prototype directly from the constructor function that created it. 
b inherits its prototype from the Bird constructor function.
b.prototype.isPrototypeOf(Bird);